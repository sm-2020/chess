#lang racket/gui

; A chess game using racket's editor toolkit

;define an instance of the snip-class% object. This snip class? is used when serializing
;snips from the pasteboard.
(define chess-piece-snip-class
  (make-object
      (class snip-class%
        (super-new)
        (send this set-classname "chess-piece-snip"))))

;snip class object needs to be registered with the Racket editor gui
(send (get-the-snip-class-list) add chess-piece-snip-class)

; Definition of the snip class
; Use the same snip class for all chess pieces, since the only difference between them
; is how they are displayed. To have a minimal working snip, three things need to be present in the derived class
; a call to set-snipclass which associates the snip instance with the snip class that was previously defined
; a get-extent method which the pasteboard% uses to determine the size of the snip
; a draw method, which is used to draw the snip onto the pasteboard canvas.
; Arguments
; a glyph, which is a string representing the Unicode character for the piece,
; a font used to render the glyph
; a size which is the size in pixels of the chess piece (since the piece is a square it will have the same width and height)
(define chess-piece%
  (class snip%
    (init-field glyph font size)
    (super-new)
    (send this set-snipclass chess-piece-snip-class)

    ; get-extent method is used by the pasteboard% to obtain the dimensions of the snip
    ; it just reports the size as both the width and height, a device context, dc is passed in,
    ; together with the position of the snip on the canvas as the x and y coordinates, in return,
    ; the pasteboard% expects the width, height and some other parameters to be filled in by
    ; our object (the other parameters have to do with snips that are part of a text editor
    ; and represent text, they don?t concern us here, so they are set to 0).
    ; The method uses box-es (single elemet vector)for the output parameters, so we need to use box-set! to set the output value.
    (define/override (get-extent dc x y width height descent space lspace rspace)
      (when width (set-box! width size))
      (when height (set-box! height size))
      (when descent (set-box! descent 0.0))
      (when space (set-box! space 0.0))
      (when lspace (set-box! lspace 0.0))
      (when rspace (set-box! rspace 0.0)))

    ; draw method is used to paint the snip contents onto the canvas. It receives the device context,
    ; dc and the snip position on the canvas. 
    (define/override (draw dc x y . other)
      (send dc set-font font)
      (send dc set-text-foreground "black")
      (define-values (glyph-width glyph-height baseline extra-space)
        (send dc get-text-extent glyph font #t))
      (let ((ox (/ (- size glyph-width) 2))
            (oy (/ (- size glyph-height 2))))
         (send dc draw-text glyph (+ x ox) (+ y oy))))
))

(define chess-piece-data
      (hash
        "K" #\u2654 "Q" #\u2655 "R" #\u2656 "B" #\u2657 "N" #\u2658 "P" #\u2659
         "k" #\u265A "q" #\u265B "r" #\u265C "b" #\u265D "n" #\u265E "p" #\u265F))

; this function receieves the piece code and creates a snip piece
(define (make-chess-piece id)
   (define glyph (hash-ref chess-piece-data id))
   (define font (send the-font-list find-or-create-font 20 'default 'normal 'normal))
   (new chess-piece% [glyph (string glyph)] [font font] [size 35]))
; Test code to see how this snip works

;Create a pasteboard to hold all the chess peices
(define board (new pasteboard%))
;Toplevel window of our app
(define topLevel (new frame% [label "Chess board"] [width (* 50 8)] [height (* 50 8)]))
; The canvas which will display the pasteboard contents
(define canvas (new editor-canvas%
                    [parent topLevel]
                    [style '(no-hscroll no-vscroll)]
                    [horizontal-inset 0]
                    [vertical-inset 0]
                    [editor board]))

(send topLevel show #t) ;; show the toplevel frame
;; Insert one of each of the chess pieces onto the board, so we can see them
;; and drag them around.
(for ([id (in-hash-keys chess-piece-data)])
  (define piece (make-chess-piece id))
  (send board insert piece (random (* 50 6)) (random (* 50 6))))